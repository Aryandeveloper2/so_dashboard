<?xml version="1.0" encoding="utf-8"?>
<modification>
<name><![CDATA[So Dashboard]]></name>
<code>so-dashboard</code>
<version><![CDATA[2.2.2.0]]></version>
<author><![CDATA[OpencartWorks]]></author>
<link>http://www.OpencartWorks.com</link>









<file path="catalog/controller/account/order.php">

<operation>
<search><![CDATA[$order_total = $this->model_account_order->getTotalOrders();]]></search>
<add position="replace"><![CDATA[
/*$order_total = $this->model_account_order->getTotalOrders();
]]></add>
</operation>

<operation>
<search><![CDATA[$data['results'] = sprintf($this->language->get('text_pagination'), ($order_total) ? (($page - 1) * 10) + 1 : 0, ((($page - 1) * 10) > ($order_total - 10)) ? $order_total : ((($page - 1) * 10) + 10), $order_total, ceil($order_total / 10));]]></search>
<add position="after"><![CDATA[
*/
]]></add>
</operation>

<operation>
<search><![CDATA[$data['orders'] = array();]]></search>
<add position="after"><![CDATA[
$data['orders'] = array();
$this->load->model('account/order');
$data['category_list'] = [
0 => $this->language->get('text_ongoing'),
1 => $this->language->get('text_delivered'),
2 => $this->language->get('text_returned'),
3 => $this->language->get('text_cancelled'),
];

$data['category_total'] = [

0 => $this->model_account_order->getTotalOrdersByCategoryStatus(['category' => 0]),
1 => $this->model_account_order->getTotalOrdersByCategoryStatus(['category' => 1]),
2 => $this->model_account_order->getTotalOrdersByCategoryStatus(['category' => 2]),
3 => $this->model_account_order->getTotalOrdersByCategoryStatus(['category' => 3]),
];



$order_data = $this->getOrders();
$data = array_merge($data,$order_data);


]]></add>
</operation>


<operation>
<search><![CDATA[public function info() {]]></search>
<add position="before"><![CDATA[
public function filter() {
$data = $this->getOrders();
$this->response->addHeader('Content-Type: application/json');
$this->response->setOutput(json_encode($data));
}
public function getOrders() {
$this->load->model('setting/module');
$this->load->model('setting/setting');
$this->load->model('setting/extension');
$this->load->model('tool/image');
$this->load->language('account/order');
$page = 1;
$url = '';

if (isset($this->request->get['page'])) {
$url .= '&page=' . $this->request->get['page'];
}

$category = 0;

if(!isset($this->request->get['category'])) {
$category = 0;
$url .= '&category=' . 0;

} else {
$category = $this->request->get['category'];
$url .= '&category=' . $category;
}


$filter_data = [
'category' => $category,
'start' => ($page - 1) * 10,
'limit' => 10,
];


$orders = array();

$this->load->model('account/order');


$order_total = $this->model_account_order->getTotalOrdersByCategoryStatus($filter_data);

$results = $this->model_account_order->getOrdersByCategoryStatus($filter_data);



foreach ($results as $key => $result) {
$product_total = $this->model_account_order->getTotalOrderProductsByOrderId($result['order_id']);
$voucher_total = $this->model_account_order->getTotalOrderVouchersByOrderId($result['order_id']);
$product_price = $this->model_account_order->getPriceOrderProductsByOrderId($result['order_id']);

$order_products = $this->model_account_order->getOrderProducts($result['order_id']);
$order_product_data = array();
$sum_products = 0;
foreach($order_products as $order_product) {
$sum_products += $order_product['quantity']; 
$order_product_data[] = array(
'product_image' =>$this->model_tool_image->resize($order_product['image'], $this->config->get('theme_' . $this->config->get('config_theme') . '_image_additional_width'), $this->config->get('theme_' . $this->config->get('config_theme') . '_image_additional_height')),
'qty' =>$order_product['quantity']
);
}

$orders[$key] = array(
'product_count' => sprintf($this->language->get('text_product_count') , ($product_total + $voucher_total)),
'product_data'=>$order_product_data ,
'sum_products' => $sum_products,
'payment_method' => $result['payment_method'],
'shipping_method' => $result['shipping_method'],
'category' => $category,
'special' => $this->currency->format($product_price['total_special_discount'], $result['currency_code'], $result['currency_value']),


'order_id'   => $result['order_id'],
'name'       => $result['firstname'] . ' ' . $result['lastname'],
'status'     => $result['status'],
'date_added' => ( $this->language->get('code') == 'fa' ) ? 
jdate($this->config->get('config_shamsidate_format') , 
strtotime( $result['date_added']) ) :  date($this->language->get('date_format_short') ,  strtotime($result['date_added']) ),
'products'   => ( $product_total + $voucher_total ),
'total'      => $this->currency->format($result['total'], $result['currency_code'], $result['currency_value']),
'smart_reorder_url' => $this->url->link('account/order/smart_reorder', 'order_id='.$result['order_id'], true),
'view'       => $this->url->link('account/order/info', 'order_id=' . $result['order_id'], true),



);

$orders[$key]['html'] = $this->load->view('account/order_list_item', ['order' => $orders[$key] ]);

}

$pagination = new Pagination();
$pagination->total = $order_total;
$pagination->page = $page;
$pagination->limit = 10;
$pagination->url = $this->url->link('account/order', 'page={page}'.'&category='.$category , true);

$pagination = $pagination->render();

$_results = sprintf($this->language->get('text_pagination'), ($order_total) ? (($page - 1) * 10) + 1 : 0, ((($page - 1) * 10) > ($order_total - 10)) ? $order_total : ((($page - 1) * 10) + 10), $order_total, ceil($order_total / 10));




return [
'orders'            => $orders,
'pagination'     => $pagination,
'results'       => $_results,
'category' => $category,
];


}



]]></add>
</operation>  




</file>

<file path="catalog/language/fa-ir/account/order.php">
<operation>
<search><![CDATA[<?php]]></search>
<add position="after"><![CDATA[
$_['text_ongoing'] = 'جاری';
$_['text_delivered'] = 'تحویل شده';
$_['text_returned'] = 'مرجوع شده';
$_['text_cancelled'] = 'لغو شده';

]]></add>
</operation>
</file>





<!--========Bug Fix Trasnaction=============-->
<file path="catalog/controller/account/transaction.php">
<operation>
<search><![CDATA['date_added'  => ($this->language->get('code') == 'fa') ? jdate($this->config->get('config_shamsidate_format'), strtotime($result['date_added'])) : ($this->language->get('code') == 'fa') ? jdate($this->config->get('config_shamsidate_format'), strtotime($result['date_added'])) : date($this->language->get('date_format_short'), strtotime($result['date_added']))]]></search>
<add position="replace"><![CDATA[
'date_added'  => ($this->language->get('code') == 'fa') ?
jdate($this->config->get('config_shamsidate_format'), strtotime($result['date_added'])) : 
date($this->language->get('date_format_short'), strtotime($result['date_added'])),
]]></add>
</operation>
</file>

<!--========catalog/model/order=============-->
<file path="catalog/model/account/order.php">
<operation>
<search><![CDATA[public function getOrderProducts($order_id) {]]></search>
<add position="before"><![CDATA[
public function getFrequentProducts($customer_id) {
$query = $this->db->query("SELECT o.order_id, op.product_id, p.image, op.name, op.quantity ,p.price ,SUM(op.quantity) sum_qty ,(SELECT price FROM " . DB_PREFIX . "product_special ps WHERE ps.product_id = p.product_id AND ps.customer_group_id = '" . (int)$this->config->get('config_customer_group_id') . "' AND ((ps.date_start = '0000-00-00' OR ps.date_start < NOW()) AND (ps.date_end = '0000-00-00' OR ps.date_end > NOW())) ORDER BY ps.priority ASC, ps.price ASC LIMIT 1) AS special FROM " . DB_PREFIX . "order_product op LEFT JOIN " . DB_PREFIX . "order o ON (op.order_id = o.order_id) LEFT JOIN " . DB_PREFIX . "product p ON (op.product_id = p.product_id) WHERE o.customer_id = ". (int)$customer_id ." AND o.order_status_id != 0  group by op.product_id order by sum_qty DESC LIMIT 12");
return $query->rows;
}



public function getOrdersByCategoryStatus($data=[]) {



$query = $this->db->query("SELECT o.order_id, o.firstname, o.lastname, os.name as status, o.date_added, o.total, o.currency_code, o.currency_value,o.payment_method, o.shipping_method FROM `" . DB_PREFIX . "order` o 
LEFT JOIN " . DB_PREFIX . "order_status os ON (o.order_status_id = os.order_status_id) 
WHERE o.customer_id = '" . (int)$this->customer->getId() . "' AND o.order_status_id > '0' AND os.category = '" . (int)$data['category'] . "'
AND o.store_id = '" . (int)$this->config->get('config_store_id') . "' 
AND os.language_id = '" . (int)$this->config->get('config_language_id') . "' ORDER BY o.order_id DESC LIMIT " . (int)$data['start'] . "," . (int)$data['limit']);


return $query->rows;
}



public function getTotalOrdersByCategoryStatus($data=[]) {

$query = $this->db->query("SELECT o.order_id FROM `" . DB_PREFIX . "order` o 
LEFT JOIN " . DB_PREFIX . "order_status os ON (o.order_status_id = os.order_status_id) 
WHERE o.customer_id = '" . (int)$this->customer->getId() . "' AND o.order_status_id > '0' AND os.category = '" . (int)$data['category'] . "'
AND o.store_id = '" . (int)$this->config->get('config_store_id') . "' 
AND os.language_id = '" . (int)$this->config->get('config_language_id') . "' ORDER BY o.order_id DESC");


return $query->num_rows;
}




public function getPriceOrderProductsByOrderId($order_id) {
$query = $this->db->query("SELECT SUM(total) AS total , SUM(special) AS special, SUM(discount) AS discount FROM " . DB_PREFIX . "order_product WHERE order_id = '" . (int)$order_id . "'");

if(empty($query->row)) {
return [];
}

return [
'total'     => $query->row['total'],
'special'     => $query->row['special'],
'total_special_discount'     => $query->row['special'] + $query->row['discount'],
];
}


]]></add>
</operation>





<operation>
<search><![CDATA[$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_product WHERE order_id = '" . (int)$order_id . "'");]]></search>
<add position="after"><![CDATA[
$query = $this->db->query("SELECT op.* , p.image FROM " . DB_PREFIX . "order_product op LEFT JOIN " . DB_PREFIX . "product p ON (op.product_id = p.product_id) WHERE op.order_id = '" . (int)$order_id. "'");
]]></add>
</operation>
<operation>
<search><![CDATA[$query = $this->db->query("SELECT o.order_id, o.firstname, o.lastname, os.name as status, o.date_added, o.total, o.currency_code, o.currency_value FROM `" . DB_PREFIX . "order` o LEFT JOIN " . DB_PREFIX . "order_status os ON (o.order_status_id = os.order_status_id) WHERE o.customer_id = '" . (int)$this->customer->getId() . "' AND o.order_status_id > '0' AND o.store_id = '" . (int)$this->config->get('config_store_id') . "' AND os.language_id = '" . (int)$this->config->get('config_language_id') . "' ORDER BY o.order_id DESC LIMIT " . (int)$start . "," . (int)$limit);]]></search>
<add position="replace"><![CDATA[
$query = $this->db->query("SELECT o.order_id, o.firstname, o.lastname, os.name as status, os.category , o.date_added, o.total, o.currency_code, o.currency_value,o.payment_method, o.shipping_method FROM `" . DB_PREFIX . "order` o LEFT JOIN " . DB_PREFIX . "order_status os ON (o.order_status_id = os.order_status_id) WHERE o.customer_id = '" . (int)$this->customer->getId() . "' AND o.order_status_id > '0' AND o.store_id = '" . (int)$this->config->get('config_store_id') . "' AND os.language_id = '" . (int)$this->config->get('config_language_id') . "' ORDER BY o.order_id DESC LIMIT " . (int)$start . "," . (int)$limit);
]]></add>
</operation>
</file>
<!--========catalog/controller/header=============-->
<file path="catalog/controller/common/header.php">
<operation>
<search><![CDATA[public function index() {]]></search>
<add position="after"><![CDATA[
/*--  End - SO Dashboard --*/
$this->load->model('account/customer');
$data['customer_info'] = $this->model_account_customer->getCustomer($this->customer->getId());

if(isset($data['customer_info']['firstname'])) {
if(empty($data['customer_info']['firstname'])) {
if(isset($data['customer_info']['mobile']) && !empty($data['customer_info']['mobile'])) {
$data['customer_info']['firstname'] = $data['customer_info']['mobile'];
} else if(isset($data['customer_info']['email']) && !empty($data['customer_info']['email'])) {
$data['customer_info']['firstname'] = $data['customer_info']['email'];
}
}
}

if (isset($data['customer_info']['custom_field']) && $data['customer_info']['custom_field'] && !empty($data['customer_info']) && !empty(json_decode($data['customer_info']['custom_field'], true))) {
$data['field_addimage'] = json_decode($data['customer_info']['custom_field'], true);
$data['thumbSrc'] = $data['field_addimage']['profileimage'];
$data['thumbUrl'] = $this->model_tool_image->resize($data['field_addimage']['profileimage'], 200, 200);
} else {
$data['thumbUrl'] = 'image/placeholder.png';
}

$data['item_compare'] = sprintf($this->language->get('text_compare'), (isset($this->session->data['compare']) ? count($this->session->data['compare']) : 0));
/*--  End - SO Dashboard --*/
]]></add>
</operation>
</file>
<!--========catalog/controller/account=============-->
<file path="catalog/controller/account/edit.php">
<operation>
<search><![CDATA[$this->response->setOutput($this->load->view('account/edit', $data))]]></search>
<add position="before"><![CDATA[
/*--  End - SO Dashboard --*/
$this->load->language('extension/module/so_dashboard');
$this->load->model('account/customer');
$data['customer_info'] = $this->model_account_customer->getCustomer($this->customer->getId());
if ($data['customer_info']['custom_field'] && !empty($data['customer_info']) && !empty(json_decode($data['customer_info']['custom_field'], true))) {
$data['field_addimage'] = json_decode($data['customer_info']['custom_field'], true);
$data['thumbSrc'] = $data['field_addimage']['profileimage'];
$data['thumbUrl'] = $this->model_tool_image->resize($data['field_addimage']['profileimage'], 200, 200);
} else {
$data['thumbUrl'] = 'image/placeholder.png';
}
/*--  End - SO Dashboard --*/
]]></add>
</operation>
<operation>
<search><![CDATA[protected function validate]]></search>
<add position="before"><![CDATA[
/*--  End - SO Dashboard --*/
public function uploadprofileimage() {
$this->load->language('tool/upload');
$json = array();
$allowed = array("image/jpeg", "image/gif", "image/png");

if (!empty($this->request->files['file']['name']) && in_array($this->request->files['file']['type'], $allowed)) {
// Sanitize the filename
$file = basename(preg_replace('/[^a-zA-Z0-9\.\-\s+]/', '', html_entity_decode($this->request->files['file']['name'], ENT_QUOTES, 'UTF-8')));
if (!$json) {
// Hide the uploaded file name so people can not link to it directly.
$this->load->model('tool/upload');
$this->load->model('tool/image');
$this->load->model('account/customer');
$filename = time() . '_' . md5(rand()) . $file;
$DIR_PROFILE = DIR_IMAGE.'profileimage/';

if(!file_exists($DIR_PROFILE)) mkdir($DIR_PROFILE, 0777, true);

$img_profile = 'profileimage/';
move_uploaded_file($this->request->files['file']['tmp_name'], $DIR_PROFILE . $filename);
$thumbUrl = $this->model_tool_image->resize($img_profile . $filename, 100, 100);

// Custom Fields
$data['custom_fields'] = array();
$this->load->model('account/custom_field');
$custom_fields = $this->model_account_custom_field->getCustomFields($this->config->get('config_customer_group_id'));
$json['name'] = $filename;
$json['thumbPath'] = $img_profile.$filename;
$json['thumbUrl'] = $thumbUrl;
$json['success'] = $this->language->get('text_upload');
}
} else {
$json['error'] = $this->language->get('error_upload');
}
$this->response->addHeader('Content-Type: application/json');
$this->response->setOutput(json_encode($json));
}
/*--  End - SO Dashboard --*/
]]></add>
</operation>
<!--Chenge Password-->
<operation>
<search><![CDATA[protected function validate() {]]></search>
<add position="after"><![CDATA[
if(!empty($this->request->post['password'])) {
if ((utf8_strlen(html_entity_decode($this->request->post['password'], ENT_QUOTES, 'UTF-8')) < 4) || (utf8_strlen(html_entity_decode($this->request->post['password'], ENT_QUOTES, 'UTF-8')) > 40)) {
$this->error['password'] = $this->language->get('error_password');
}
if ($this->request->post['confirm'] != $this->request->post['password']|| empty($this->request->post['confirm'])) {
$this->error['confirm'] = $this->language->get('error_confirm');
}
} elseif(!empty($this->request->post['confirm'])) {
if ((utf8_strlen(html_entity_decode($this->request->post['password'], ENT_QUOTES, 'UTF-8')) < 4) || (utf8_strlen(html_entity_decode($this->request->post['password'], ENT_QUOTES, 'UTF-8')) > 40)) {
$this->error['password'] = $this->language->get('error_password');
}
if ($this->request->post['confirm'] != $this->request->post['password']|| empty($this->request->post['confirm'])) {
$this->error['confirm'] = $this->language->get('error_confirm');
}
}
]]></add>
</operation>
<operation>
<search><![CDATA[if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validate()) {]]></search>
<add position="after"><![CDATA[
if(!empty($this->request->post['password']) && !empty($this->request->post['confirm'])) {
$this->model_account_customer->editPassword($this->customer->getEmail(), $this->request->post['password']);
}
$this->model_account_customer->editNewsletter($this->request->post['newsletter']);
]]></add>
</operation>
<operation>
<search><![CDATA[$data['action'] = $this->url->link('account/edit', '', true);]]></search>
<add position="before"><![CDATA[
if (isset($this->error['password'])) {
$data['error_password'] = $this->error['password'];
} else {
$data['error_password'] = '';
}
if (isset($this->error['confirm'])) {
$data['error_confirm'] = $this->error['confirm'];
} else {
$data['error_confirm'] = '';
}
]]></add>
</operation>
<operation>
<search><![CDATA[$data['action'] = $this->url->link('account/edit', '', true);]]></search>
<add position="after"><![CDATA[
if (isset($this->request->post['password'])) {
$data['password'] = $this->request->post['password'];
} else {
$data['password'] = '';
}

if (isset($this->request->post['confirm'])) {
$data['confirm'] = $this->request->post['confirm'];
} else {
$data['confirm'] = '';
}
$data['newsletter'] = $this->customer->getNewsletter();
]]></add>
</operation>
<!--End Chenge Password-->
</file>
<file path="catalog/controller/account/account.php">
<operation>
<search><![CDATA[$data['header'] = $this->load->controller('common/header');]]></search>
<add position="before"><![CDATA[
/*--  End - SO Dashboard --*/

$this->load->model('account/order');

$data['logged'] = $this->customer->isLogged();
$data['logout'] = $this->url->link('account/logout', '', true);



/*===========================* Frequent Products in customer orders *===========================*/
$this->load->model('tool/image');
$frequent_products = $this->model_account_order->getFrequentProducts($this->customer->getId());
$data['frequent_products_list'] = array();
foreach ($frequent_products as $frequent_product) {
$product_img = $this->model_tool_image->resize($frequent_product['image'], $this->config->get('theme_' . $this->config->get('config_theme') . '_image_product_width'), $this->config->get('theme_' . $this->config->get('config_theme') . '_image_product_height'));
$product_data = [
'product_id'  			=> $frequent_product['product_id'],
'image'       			=> $product_img,
'name'        			=> $frequent_product['name'],
'description' 			=> '',
'price'       			=> $this->currency->format($frequent_product['price'], $this->session->data['currency']),
'special'     			=> $frequent_product['special'] != 0 ? $this->currency->format($frequent_product['special'], $this->session->data['currency']) : false,
'discount'      		=> false,
'product_new'			=> false,
'tax'         			=> false,
'rating'      			=> false,
'quantity'    			=> $frequent_product['quantity'],
'manufacturer_id'      	=> false,
'manufacturer_name'     => false,
'manufacturer_href'     => false,
'display_specail_time' 	=>  false,
'custom_class'          => "swiper-slide",

'display_title' 	        =>  1,
'maxlength_title' 	        =>  0,
'display_description' 	    =>  0,
'maxlength_description' 	=>  0,
'display_price' 	        =>  1,
'display_wishlist' 	        =>  0,
'display_compare' 	        =>  0,
'display_brand' 	        =>  0,
'display_rating' 	        =>  0,
'display_sale' 	            =>  1,
'display_new' 	            =>  0,
'display_image' 	        =>  1,
'width' 	                =>  250,
'heigth' 	                =>  250,
'date_day' 	                =>  0,
'display_specail_time' 	    =>  false,
];
$data['frequent_products_list'][] = $this->load->controller('extension/component/product_card', $product_data);
}
/*===========================* End - Frequent Products *===========================*/
$data['show_all_orders']= $this->url->link('account/order', '', true);
$data['orders'] = array();

$order_total = $this->model_account_order->getTotalOrders();
$results = $this->model_account_order->getOrders(0 , 2);

foreach ($results as $_key => $result) {
$product_price = $this->model_account_order->getPriceOrderProductsByOrderId($result['order_id']);
$product_total = $this->model_account_order->getTotalOrderProductsByOrderId($result['order_id']);
$voucher_total = $this->model_account_order->getTotalOrderVouchersByOrderId($result['order_id']);
$order_products = $this->model_account_order->getOrderProducts($result['order_id']);
$order_product_data = array();
$sum_products = 0;
foreach($order_products as $order_product) {
$sum_products += $order_product['quantity']; 
$order_product_data[] = array(
'product_image' =>$this->model_tool_image->resize($order_product['image'], $this->config->get('theme_' . $this->config->get('config_theme') . '_image_additional_width'), $this->config->get('theme_' . $this->config->get('config_theme') . '_image_additional_height')),
'qty' =>$order_product['quantity']
);
}

$data['orders'][$_key] = array(
'special' => $this->currency->format($product_price['total_special_discount'], $result['currency_code'], $result['currency_value']),

'order_id' => $result['order_id'],
'category' => $result['category'],
'name' => $result['firstname'] . ' ' . $result['lastname'],
'status' => $result['status'],
'date_added' => ($this->language->get('code') == 'fa') ? jdate('l d F Y', strtotime($result['date_added'])) : date($this->language->get('date_format_short'), strtotime($result['date_added'])),
'total' => $this->currency->format($result['total'], $result['currency_code'], $result['currency_value']),
'view' => $this->url->link('account/order/info', 'order_id=' . $result['order_id'], true),
'product_count' => sprintf($this->language->get('text_product_count') , ($product_total + $voucher_total)),
'product_data'=>$order_product_data ,
'smart_reorder_url' => $this->url->link('account/order/smart_reorder', 'order_id='.$result['order_id'], true),
'sum_products' => $sum_products,
'payment_method' => $result['payment_method'],
'shipping_method' => $result['shipping_method']
); 

$data['orders'][$_key]['html'] =  $this->load->view('account/order_list_item', ['order' => $data['orders'][$_key] ]);
}
$data['continue'] = $this->url->link('account/account', '', true);
$data['totalOrder'] = !empty($data['orders']) ? count($data['orders']) : 0;
// Wishlist
$this->load->model('account/transaction');
$this->load->model('account/wishlist');
$this->load->model('account/download');
if ($this->customer->isLogged()) {
$data['totalwishlist'] = $this->model_account_wishlist->getTotalWishlist();
$data['text_wishlist'] = $this->language->get('text_wishlist');
}
//Download
$data['totalDownload'] = $this->model_account_download->getTotalDownloads();
$data['totalAmount'] = $this->currency->format($this->model_account_transaction->getTotalAmount(), $this->session->data['currency']);
$this->load->model('setting/module');
$this->load->model('design/layout');
$data['modules'] = array();
$layout_id = 0;
if (isset($this->request->get['route'])) {
$route = (string)$this->request->get['route'];
} else {
$route = 'common/home';
}
if (!$layout_id) {
$layout_id = $this->model_design_layout->getLayout($route);
}
$modules = $this->model_design_layout->getLayoutModules($layout_id, 'column_right');
if(empty($modules)) $modules = $this->model_design_layout->getLayoutModules($layout_id, 'column_left');
foreach ($modules as $module) {
$part = explode('.', $module['code']);
if (isset($part[0]) && $part[0]=='so_dashboard' && $this->config->get('module_' . $part[0] . '_status')) {
$module_data = $this->load->controller('extension/module/' . $part[0]);
if ($module_data) {
$data['modules'][] = $module_data;
}
}
if (isset($part[1]) && $part[0]=='so_dashboard') {
$setting_info = $this->model_setting_module->getModule($part[1]);
if ($setting_info && $setting_info['status']) {
$data['modules'] = $setting_info;
}
}
}
]]></add>
</operation>
<operation>
<search><![CDATA[$this->response->setOutput($this->load->view('account/account', $data))]]></search>
<add position="replace"><![CDATA[$this->response->setOutput($this->load->view('account/so_dashboard.', $data))]]></add>
</operation>
</file>
<file path="catalog/view/theme/*/template/account/edit.twig">
<operation>
<search><![CDATA[{{ footer }}]]></search>
<add position="after"><![CDATA[
{#--  End - SO Dashboard --#}
<style>.profileimage{margin-top: 17px;}</style>
<script type="text/javascript"><!--
$('.profileimage').on('click', function() {
var node = this;
$('#form-upload').remove();
$('body').prepend('<form enctype="multipart/form-data" id="form-upload" style="display: none;"><input type="file" name="file" /></form>');
$('#form-upload input[name=\'file\']').trigger('click');
if (typeof timer != 'undefined') {
clearInterval(timer);
}
timer = setInterval(function() {
if ($('#form-upload input[name=\'file\']').val() != '') {
clearInterval(timer);
$.ajax({
url: 'index.php?route=account/edit/uploadprofileimage',
type: 'post',
dataType: 'json',
data: new FormData($('#form-upload')[0]),
cache: false,
contentType: false,
processData: false,
beforeSend: function() {
$(node).button('loading');
},
complete: function() {
$(node).button('reset');
},
success: function(json) {
$('.text-danger').remove();
if (json['error']) {
$('#image').after('<div class="text-danger">' + json['error'] + '</div>');
}
if (json['success']) {
alert(json['success']);
$('#image').attr('value', json['thumbPath']);
$('#imagesrc').attr('src', json['thumbUrl'] );
}
},
error: function(xhr, ajaxOptions, thrownError) {
alert(thrownError + "\r\n" + xhr.statusText + "\r\n" + xhr.responseText);
}
});
}
}, 500);
});
//--></script>
]]></add>
</operation>
<operation>
<search><![CDATA[{% for custom_field in custom_fields %}]]></search>
<add position="before"><![CDATA[
{#--  End - SO Dashboard --#}
<div class="form-group custom-field">
<label class="col-sm-2 control-label">{{entry_profileImage}}</label>
<div class="col-sm-2 profileimg">
<a class="profileimage btn btn-default"><i class="fa fa-upload" aria-hidden="true"></i> {{entry_upload}}</a>
<input type="hidden" name="custom_field[account][profileimage]" id="image" value="{{thumbSrc}}">
</div>
<div class="col-sm-2">
<img src="{{thumbUrl}}" id="imagesrc" class="img-thumbnail">
</div>
</div>
{#--  End - SO Dashboard --#}
]]></add>
</operation>
<!--Chenge Password and newslatter-->
<operation>
<search><![CDATA[<div class="buttons clearfix">]]></search>
<add position="before"><![CDATA[
<fieldset>
<legend>{{ text_password }}</legend>
<div class="form-group">
<label class="col-sm-2 control-label" for="input-password">{{ entry_password }}</label>
<div class="col-sm-10">
<input type="password" name="password" value="{{ password }}" placeholder="{{ entry_password }}" id="input-password" class="form-control" autocomplete="new-password"/>
{% if error_password %}
<div class="text-danger">{{ error_password }}</div>
{% endif %}
</div>
</div>
<div class="form-group">
<label class="col-sm-2 control-label" for="input-confirm">{{ entry_confirm }}</label>
<div class="col-sm-10">
<input type="password" name="confirm" value="{{ confirm }}" placeholder="{{ entry_confirm }}" id="input-confirm" class="form-control" />
{% if error_confirm %}
<div class="text-danger">{{ error_confirm }}</div>
{% endif %}
</div>
</div>
</fieldset>
<fieldset>
<legend>{{ text_newsleter }}</legend>
<div class="form-group">
<label class="col-sm-2 control-label">{{ entry_newsletter }}</label>
<div class="col-sm-10">
{% if newsletter %}
<label class="radio-inline">
<input type="radio" name="newsletter" value="1" checked="checked" />
{{ text_yes }} </label>
<label class="radio-inline">
<input type="radio" name="newsletter" value="0" />
{{ text_no }}</label>
{% else %}
<label class="radio-inline">
<input type="radio" name="newsletter" value="1" />
{{ text_yes }} </label>
<label class="radio-inline">
<input type="radio" name="newsletter" value="0" checked="checked" />
{{ text_no }}</label>
{% endif %}
</div>
</div>
</fieldset>
]]></add>
</operation>
<!--End Chenge Password and Newslatter -->
</file>
<file path="catalog/controller/account/logout.php">
<operation>
<search><![CDATA[$this->response->redirect($this->url->link('account/logout', '', true));]]></search>
<add position="replace"><![CDATA[$this->response->redirect($this->url->link('common/home', '', true));]]></add>
</operation>
</file>
<!--========catalog/language/fa-ir/account=============-->
<file path="catalog/language/fa-ir/account/edit.php">
<!--Chenge Password and Newslatter-->
<operation>
<search><![CDATA[$_['text_success']       = 'حساب کاربری شما با موفقیت بروزرسانی شد.';]]></search>
<add position="after"><![CDATA[
// Text
$_['text_password']  = 'رمز عبور';
$_['text_success']   = 'رمز عبور شما با موفقيت بروزرسانی شد!';
$_['text_newsleter'] ='اشتراک خبرنامه';

// Entry
$_['entry_password'] = 'رمز عبور:';
$_['entry_confirm']  = 'تکرار رمز عبور:';
$_['entry_newsletter'] ='اشتراک';

// Error
$_['error_password'] = 'رمز عبور باید بین 4 تا 20 کاراکتر باشد!';
$_['error_confirm']  = 'تکرار رمز عبور با رمز عبور مطابقت ندارد!';
]]></add>
</operation>
<!--End Chenge Password and Newslatter-->
</file>

<file path="catalog/view/theme/default/template/account/*">
<!-- Add ExitButton -->
<operation>
<search><![CDATA[{{ content_top }}]]></search>
<add position="after"><![CDATA[
<div class="dasboard-head">
]]></add>
</operation>
<operation>
<search><![CDATA[<div class="main-content">]]></search>
<add position="before"><![CDATA[
<div class="btns" style="margin-right:auto;">
<a class="btn-logout"  href="{{ logout }}" data-toggle="tooltip" title="" data-original-title="{{ text_logout }}"><i class="fa fa-power-off" aria-hidden="true"></i></a>
<button class="open-column" type="button"  id="show-aside" data-bs-toggle="offcanvas" data-bs-target="#left-column" aria-controls="left-column">
<i class="fa fa-bars" aria-hidden="true"></i>
</button>
</div>
</div>
]]></add>
</operation>
</file>


<file path="catalog/controller/common/column_left.php">
<operation>
<search><![CDATA[return $this->load->view('common/column_left', $data);]]></search>
<add position="before"><![CDATA[
if($this->session->data['device'] =='mobile') {
$data['device']   = 'mobile';
} else {
$data['device']   = 'desktop';
}
]]></add>
</operation>
</file>


<file path="catalog/controller/account/*">
<operation>
<search><![CDATA[$this->response->setOutput(]]></search>
<add position="before"><![CDATA[
$data['logout'] = $this->url->link('account/logout', '', true);
]]></add>
</operation>
<!--End  Add ExitButton -->
</file>


<file path="catalog/controller/account/order.php">
<operation>
<search><![CDATA[$order_info = $this->model_account_order->getOrder($result['order_id']);]]></search>
<add position="after"><![CDATA[
$this->load->model('tool/image');
$order_products = $this->model_account_order->getOrderProducts($result['order_id']);
$order_product_data = array();
$sum_products = 0;

foreach($order_products as $order_product) {
$sum_products += $order_product['quantity']; 
$order_product_data[] = array(
'product_image' =>$this->model_tool_image->resize($order_product['image'], $this->config->get('theme_' . $this->config->get('config_theme') . '_image_additional_width'), $this->config->get('theme_' . $this->config->get('config_theme') . '_image_additional_height')),
'qty' =>$order_product['quantity']
);
}
]]></add>
</operation>
<operation>
<search><![CDATA['order_id'   => $result['order_id'],]]></search>
<add position="after"><![CDATA[
'product_count' => sprintf($this->language->get('text_product_count') , ($product_total + $voucher_total)),
'product_data'=>$order_product_data ,
'sum_products' => $sum_products,
]]></add>
</operation>
<operation>
<search><![CDATA['date_added' => ($this->language->get('code') == 'fa') ? jdate($this->config->get('config_shamsidate_format'), strtotime($result['date_added'])) : date($this->language->get('date_format_short'), strtotime($result['date_added'])),]]></search>
<add position="after"><![CDATA['date_added' => ($this->language->get('code') == 'fa') ? jdate('l d F Y', strtotime($result['date_added'])) : date($this->language->get('date_format_short'), strtotime($result['date_added'])),]]></add>
</operation>
</file>
<file path="catalog/language/fa-ir/account/order.php">
<operation>
<search><![CDATA[$_['text_error']]]></search>
<add position="before"><![CDATA[
$_['text_product_count']  = 'شامل %u قلم کالا';
$_['text_show_order']     = 'جزییات سفارش';
$_['text_show_factor']    = 'مشاهده فاکتور';
$_['text_reorder']        = 'سفارش مجدد';
$_['text_sum_products']    = 'تعداد کالا (ها)';
$_['text_discount']       = 'جمع کل تخفیف';
$_['text_empty_order']    = 'سفارشی موجود نیست';
$_['text_total']    = 'جمع کل سفارش';
]]></add>
</operation>
</file>
</modification>